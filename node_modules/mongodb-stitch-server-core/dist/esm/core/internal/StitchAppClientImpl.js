import { AuthEventKind, AuthRebindEvent, CoreStitchAppClient, CoreStitchServiceClientImpl, StitchAppClientInfo, StitchAppRequestClient, StitchAppRoutes, } from "mongodb-stitch-core-sdk";
import StitchServiceClientImpl from "../../services/internal/StitchServiceClientImpl";
import StitchAuthImpl from "../auth/internal/StitchAuthImpl";
var StitchAppClientImpl = (function () {
    function StitchAppClientImpl(clientAppId, config) {
        this.info = new StitchAppClientInfo(clientAppId, config.dataDirectory, config.localAppName, config.localAppVersion);
        this.routes = new StitchAppRoutes(this.info.clientAppId);
        var requestClient = new StitchAppRequestClient(clientAppId, config.baseUrl, config.transport);
        this.auth = new StitchAuthImpl(requestClient, this.routes.authRoutes, config.storage, this.info);
        this.coreClient = new CoreStitchAppClient(this.auth, this.routes);
        this.serviceClients = [];
        this.auth.addSynchronousAuthListener(this);
    }
    StitchAppClientImpl.prototype.getServiceClient = function (factory, serviceName) {
        if (isServiceClientFactory(factory)) {
            var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, "");
            this.bindServiceClient(serviceClient);
            return factory.getClient(serviceClient, this.info);
        }
        else {
            var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);
            this.bindServiceClient(serviceClient);
            return factory.getNamedClient(serviceClient, this.info);
        }
    };
    StitchAppClientImpl.prototype.getGeneralServiceClient = function (serviceName) {
        var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);
        this.bindServiceClient(serviceClient);
        return new StitchServiceClientImpl(serviceClient);
    };
    StitchAppClientImpl.prototype.callFunction = function (name, args) {
        return this.coreClient.callFunction(name, args);
    };
    StitchAppClientImpl.prototype.onActiveUserChanged = function (_, currentActiveUser, previousActiveUser) {
        this.onRebindEvent(new AuthRebindEvent({
            currentActiveUser: currentActiveUser,
            kind: AuthEventKind.ActiveUserChanged,
            previousActiveUser: previousActiveUser
        }));
    };
    StitchAppClientImpl.prototype.close = function () {
        this.auth.close();
    };
    StitchAppClientImpl.prototype.bindServiceClient = function (coreStitchServiceClient) {
        this.serviceClients.push(coreStitchServiceClient);
    };
    StitchAppClientImpl.prototype.onRebindEvent = function (rebindEvent) {
        this.serviceClients.forEach(function (serviceClient) {
            serviceClient.onRebindEvent(rebindEvent);
        });
    };
    return StitchAppClientImpl;
}());
export default StitchAppClientImpl;
function isServiceClientFactory(factory) {
    return factory.getClient !== undefined;
}
//# sourceMappingURL=StitchAppClientImpl.js.map