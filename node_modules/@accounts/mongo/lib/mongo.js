"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lodash_1 = require("lodash");
var mongodb_1 = require("mongodb");
var toMongoID = function (objectId) {
    if (typeof objectId === 'string') {
        return new mongodb_1.ObjectID(objectId);
    }
    return objectId;
};
var defaultOptions = {
    collectionName: 'users',
    sessionCollectionName: 'sessions',
    timestamps: {
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
    },
    convertUserIdToMongoObjectId: true,
    convertSessionIdToMongoObjectId: true,
    caseSensitiveUserName: true,
    dateProvider: function (date) { return (date ? date.getTime() : Date.now()); },
};
var Mongo = /** @class */ (function () {
    function Mongo(db, options) {
        this.options = lodash_1.merge(tslib_1.__assign({}, defaultOptions), options);
        if (!db) {
            throw new Error('A database connection is required');
        }
        this.db = db;
        this.collection = this.db.collection(this.options.collectionName);
        this.sessionCollection = this.db.collection(this.options.sessionCollectionName);
    }
    Mongo.prototype.setupIndexes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sessionCollection.createIndex('token', {
                            unique: true,
                            sparse: true,
                        })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.collection.createIndex('username', {
                                unique: true,
                                sparse: true,
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.collection.createIndex('emails.address', {
                                unique: true,
                                sparse: true,
                            })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.createUser = function (_a) {
        var password = _a.password, username = _a.username, email = _a.email, cleanUser = tslib_1.__rest(_a, ["password", "username", "email"]);
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user, ret;
            var _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        user = tslib_1.__assign(tslib_1.__assign({}, cleanUser), (_b = { services: {} }, _b[this.options.timestamps.createdAt] = this.options.dateProvider(), _b[this.options.timestamps.updatedAt] = this.options.dateProvider(), _b));
                        if (password) {
                            user.services.password = { bcrypt: password };
                        }
                        if (username) {
                            user.username = username;
                        }
                        if (email) {
                            user.emails = [{ address: email.toLowerCase(), verified: false }];
                        }
                        if (this.options.idProvider) {
                            user._id = this.options.idProvider();
                        }
                        return [4 /*yield*/, this.collection.insertOne(user)];
                    case 1:
                        ret = _c.sent();
                        return [2 /*return*/, ret.ops[0]._id.toString()];
                }
            });
        });
    };
    Mongo.prototype.findUserById = function (userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.findOne({ _id: id })];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.findUserByEmail = function (email) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.collection.findOne({
                            'emails.address': email.toLowerCase(),
                        })];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.findUserByUsername = function (username) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filter, user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = this.options.caseSensitiveUserName
                            ? { username: username }
                            : {
                                $where: "obj.username && (obj.username.toLowerCase() === \"" + username.toLowerCase() + "\")",
                            };
                        return [4 /*yield*/, this.collection.findOne(filter)];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.findPasswordHash = function (userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findUserById(userId)];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            return [2 /*return*/, lodash_1.get(user, 'services.password.bcrypt')];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    Mongo.prototype.findUserByEmailVerificationToken = function (token) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.collection.findOne({
                            'services.email.verificationTokens.token': token,
                        })];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.findUserByResetPasswordToken = function (token) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.collection.findOne({
                            'services.password.reset.token': token,
                        })];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.findUserByServiceId = function (serviceName, serviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.collection.findOne((_a = {},
                            _a["services." + serviceName + ".id"] = serviceId,
                            _a))];
                    case 1:
                        user = _b.sent();
                        if (user) {
                            user.id = user._id.toString();
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Mongo.prototype.addEmail = function (userId, newEmail, verified) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $addToSet: {
                                    emails: {
                                        address: newEmail.toLowerCase(),
                                        verified: verified,
                                    },
                                },
                                $set: (_a = {},
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        ret = _b.sent();
                        if (ret.result.nModified === 0) {
                            throw new Error('User not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.removeEmail = function (userId, email) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $pull: { emails: { address: email.toLowerCase() } },
                                $set: (_a = {},
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        ret = _b.sent();
                        if (ret.result.nModified === 0) {
                            throw new Error('User not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.verifyEmail = function (userId, email) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id, 'emails.address': email }, {
                                $set: (_a = {
                                        'emails.$.verified': true
                                    },
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                                $pull: { 'services.email.verificationTokens': { address: email } },
                            })];
                    case 1:
                        ret = _b.sent();
                        if (ret.result.nModified === 0) {
                            throw new Error('User not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.setUsername = function (userId, newUsername) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $set: (_a = {
                                        username: newUsername
                                    },
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        ret = _b.sent();
                        if (ret.result.nModified === 0) {
                            throw new Error('User not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.setPassword = function (userId, newPassword) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $set: (_a = {
                                        'services.password.bcrypt': newPassword
                                    },
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                                $unset: {
                                    'services.password.reset': '',
                                },
                            })];
                    case 1:
                        ret = _b.sent();
                        if (ret.result.nModified === 0) {
                            throw new Error('User not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.setService = function (userId, serviceName, service) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $set: (_a = {},
                                    _a["services." + serviceName] = service,
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.unsetService = function (userId, serviceName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id;
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $set: (_a = {},
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                                $unset: (_b = {},
                                    _b["services." + serviceName] = '',
                                    _b),
                            })];
                    case 1:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.setUserDeactivated = function (userId, deactivated) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: id }, {
                                $set: (_a = {
                                        deactivated: deactivated
                                    },
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.createSession = function (userId, token, connection, extraData) {
        if (connection === void 0) { connection = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var session, ret;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        session = (_a = {
                                userId: userId,
                                token: token,
                                userAgent: connection.userAgent,
                                ip: connection.ip,
                                extraData: extraData,
                                valid: true
                            },
                            _a[this.options.timestamps.createdAt] = this.options.dateProvider(),
                            _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                            _a);
                        if (this.options.idProvider) {
                            session._id = this.options.idProvider();
                        }
                        return [4 /*yield*/, this.sessionCollection.insertOne(session)];
                    case 1:
                        ret = _b.sent();
                        return [2 /*return*/, ret.ops[0]._id.toString()];
                }
            });
        });
    };
    Mongo.prototype.updateSession = function (sessionId, connection, newToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var updateClause, _id;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updateClause = {
                            $set: (_a = {
                                    userAgent: connection.userAgent,
                                    ip: connection.ip
                                },
                                _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                _a),
                        };
                        if (newToken) {
                            updateClause.$set.token = newToken;
                        }
                        _id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
                        return [4 /*yield*/, this.sessionCollection.updateOne({ _id: _id }, updateClause)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.invalidateSession = function (sessionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _id;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
                        return [4 /*yield*/, this.sessionCollection.updateOne({ _id: _id }, {
                                $set: (_a = {
                                        valid: false
                                    },
                                    _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                    _a),
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.invalidateAllSessions = function (userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sessionCollection.updateMany({ userId: userId }, {
                            $set: (_a = {
                                    valid: false
                                },
                                _a[this.options.timestamps.updatedAt] = this.options.dateProvider(),
                                _a),
                        })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.findSessionByToken = function (token) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var session;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sessionCollection.findOne({ token: token })];
                    case 1:
                        session = _a.sent();
                        if (session) {
                            session.id = session._id.toString();
                        }
                        return [2 /*return*/, session];
                }
            });
        });
    };
    Mongo.prototype.findSessionById = function (sessionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _id, session;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
                        return [4 /*yield*/, this.sessionCollection.findOne({ _id: _id })];
                    case 1:
                        session = _a.sent();
                        if (session) {
                            session.id = session._id.toString();
                        }
                        return [2 /*return*/, session];
                }
            });
        });
    };
    Mongo.prototype.addEmailVerificationToken = function (userId, email, token) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _id;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: _id }, {
                                $push: {
                                    'services.email.verificationTokens': {
                                        token: token,
                                        address: email.toLowerCase(),
                                        when: this.options.dateProvider(),
                                    },
                                },
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.addResetPasswordToken = function (userId, email, token, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _id;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
                        return [4 /*yield*/, this.collection.updateOne({ _id: _id }, {
                                $push: {
                                    'services.password.reset': {
                                        token: token,
                                        address: email.toLowerCase(),
                                        when: this.options.dateProvider(),
                                        reason: reason,
                                    },
                                },
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Mongo.prototype.setResetPassword = function (userId, email, newPassword) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setPassword(userId, newPassword)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Mongo;
}());
exports.Mongo = Mongo;
//# sourceMappingURL=mongo.js.map