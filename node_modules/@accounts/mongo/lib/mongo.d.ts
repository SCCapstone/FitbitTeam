import { ConnectionInformations, CreateUser, DatabaseInterface, Session, User } from '@accounts/types';
import { AccountsMongoOptions } from './types';
export declare class Mongo implements DatabaseInterface {
    private options;
    private db;
    private collection;
    private sessionCollection;
    constructor(db: any, options?: AccountsMongoOptions);
    setupIndexes(): Promise<void>;
    createUser({ password, username, email, ...cleanUser }: CreateUser): Promise<string>;
    findUserById(userId: string): Promise<User | null>;
    findUserByEmail(email: string): Promise<User | null>;
    findUserByUsername(username: string): Promise<User | null>;
    findPasswordHash(userId: string): Promise<string | null>;
    findUserByEmailVerificationToken(token: string): Promise<User | null>;
    findUserByResetPasswordToken(token: string): Promise<User | null>;
    findUserByServiceId(serviceName: string, serviceId: string): Promise<User | null>;
    addEmail(userId: string, newEmail: string, verified: boolean): Promise<void>;
    removeEmail(userId: string, email: string): Promise<void>;
    verifyEmail(userId: string, email: string): Promise<void>;
    setUsername(userId: string, newUsername: string): Promise<void>;
    setPassword(userId: string, newPassword: string): Promise<void>;
    setService(userId: string, serviceName: string, service: object): Promise<void>;
    unsetService(userId: string, serviceName: string): Promise<void>;
    setUserDeactivated(userId: string, deactivated: boolean): Promise<void>;
    createSession(userId: string, token: string, connection?: ConnectionInformations, extraData?: object): Promise<string>;
    updateSession(sessionId: string, connection: ConnectionInformations, newToken?: string): Promise<void>;
    invalidateSession(sessionId: string): Promise<void>;
    invalidateAllSessions(userId: string): Promise<void>;
    findSessionByToken(token: string): Promise<Session | null>;
    findSessionById(sessionId: string): Promise<Session | null>;
    addEmailVerificationToken(userId: string, email: string, token: string): Promise<void>;
    addResetPasswordToken(userId: string, email: string, token: string, reason: string): Promise<void>;
    setResetPassword(userId: string, email: string, newPassword: string): Promise<void>;
}
